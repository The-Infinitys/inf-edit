name: Build and Release Rust Packages

on:
  push:
    branches:
      - 'release' # releaseブランチへのプッシュでトリガー

jobs:
  build_and_package:
    runs-on: ubuntu-latest # Linux環境で実行

    permissions:
      contents: write # リリース作成とファイルのアップロードに必要

    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu # AMD64
          - aarch64-unknown-linux-gnu # ARM64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain for ${{ matrix.target }}
      uses: dtolnay/rust-toolchain@stable
      with:
        target: ${{ matrix.target }}
        toolchain: stable # 安定版を使用

    - name: Install cargo-deb
      run: cargo install cargo-deb --force # cargo-debのみインストール

    - name: Install cross-compilation tools for aarch64 (if target is aarch64)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu libc6-dev-arm64-cross

    - name: Build release binary for ${{ matrix.target }}
      run: |
        cargo build --release --target ${{ matrix.target }}

    - name: Create DEB package for ${{ matrix.target }}
      id: create_deb
      run: |
        # cargo-debはデフォルトでtarget/<TARGET>/debian/your_rust_app_<VERSION>_<ARCH>.deb を生成
        # --targetを指定して、対象のビルドパスを見るようにする
        cargo deb --target ${{ matrix.target }}
        # 生成されたdebファイル名を特定
        DEB_FILE=$(ls target/${{ matrix.target }}/debian/*.deb)
        echo "deb_file=${DEB_FILE}" >> $GITHUB_OUTPUT

    - name: Create Tarball (.tar.gz) for ${{ matrix.target }}
      id: create_tarball
      run: |
        BINARY_NAME="inf-edit" # Cargo.tomlのnameフィールドと同じ名前にしてください
        VERSION=$(echo ${{ github.ref_name }} | sed 's/^v//') # vを取り除く
        if [ -z "$VERSION" ]; then
          VERSION="latest" # releaseブランチ直接の場合、バージョンがないのでlatestとする
        fi
        TAR_FILE="${BINARY_NAME}-${VERSION}-${{ matrix.target }}.tar.gz"
        mkdir -p dist/${{ matrix.target }}
        cp target/${{ matrix.target }}/release/${BINARY_NAME} dist/${{ matrix.target }}/
        tar -czvf ${TAR_FILE} -C dist/${{ matrix.target }}/ ${BINARY_NAME}
        echo "tar_file=${TAR_FILE}" >> $GITHUB_OUTPUT

    - name: Upload DEB package artifact (${{ matrix.target }})
      uses: actions/upload-artifact@v4
      with:
        name: inf-edit-deb-${{ matrix.target }}
        path: ${{ steps.create_deb.outputs.deb_file }}

    - name: Upload Tarball artifact (${{ matrix.target }})
      uses: actions/upload-artifact@v4
      with:
        name: inf-edit-tar-${{ matrix.target }}
        path: ${{ steps.create_tarball.outputs.tar_file }}

  create_github_release:
    needs: build_and_package # パッケージのビルドが完了してから実行
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/release' # releaseブランチへのpush時のみ
    permissions:
      contents: write # リリース作成とファイルのアップロードに必要

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          # リリース名とタグ名を設定
          # releaseブランチへのプッシュがトリガーなので、SHAをタグ名に含める
          tag_name: release-${{ github.sha }}
          name: Release ${{ github.ref_name }}-${{ github.sha }}
          body: |
            This release includes DEB packages and Tarballs for Linux (x86_64 and aarch64).
          files: |
            artifacts/**/*.deb # ダウンロードしたdebファイルをすべて添付
            artifacts/**/*.tar.gz # ダウンロードしたtar.gzファイルをすべて添付
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # リリース作成のためのトークン
